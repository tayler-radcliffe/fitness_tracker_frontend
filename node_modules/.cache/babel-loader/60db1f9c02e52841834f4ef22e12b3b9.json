{"ast":null,"code":"var _jsxFileName = \"/home/tradcliffe/fitness_tracker/src/components/MyRoutines.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { fetchUsername, getCurrentToken, fetchUserRoutines } from '../api';\nimport MyRoutine from './MyRoutine';\nimport Button from '@material-ui/core/Button';\nimport RoutineForm from './RoutineForm';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyRoutines = () => {\n  _s();\n\n  const [myRoutines, setMyRoutines] = useState([]);\n  const [creator, setCreator] = useState('');\n  const [currentUser, setCurrentUser] = useState('');\n  const [open, setIsOpen] = useState(false); // useEffect(() => {\n  //   fetchUsername()\n  //   .then((data) => setCurrentUser(data.username))\n  //   fetchUserRoutines(currentUser)\n  //   .then((data) => setMyRoutines(data))\n  // })\n\n  fetchUserRoutines(currentUser).then(data => setMyRoutines(data));\n  console.log(currentUser);\n  console.log(myRoutines);\n\n  const showForm = () => {\n    if (open === false) {\n      setIsOpen(true);\n    } else {\n      setIsOpen(false);\n    }\n  };\n\n  const useStyles = makeStyles(theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      position: 'relative',\n      margin: '10px'\n    },\n    formControl: {\n      margin: theme.spacing(2),\n      minWidth: 120\n    },\n    textFields: {\n      width: '350px',\n      margin: theme.spacing(2)\n    }\n  }));\n  const classes = useStyles();\n\n  if (getCurrentToken()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Routines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.container,\n        color: \"secondary\",\n        variant: \"contained\",\n        type: \"submit\",\n        onClick: showForm,\n        children: \"Create A New Routine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(RoutineForm, {\n        myRoutines: myRoutines,\n        open: open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), myRoutines ? myRoutines.map((routine, index) => /*#__PURE__*/_jsxDEV(MyRoutine, {\n        creator: creator,\n        setCreator: setCreator,\n        routine: routine\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Use the form above to start creating routines.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myRoutines\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please register or sign in to see your routines.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 11\n  }, this);\n};\n\n_s(MyRoutines, \"3iKy+VAm2F2fJ07g8+vtrGtcu1g=\", true);\n\n_c = MyRoutines;\nexport default MyRoutines;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRoutines\");","map":{"version":3,"sources":["/home/tradcliffe/fitness_tracker/src/components/MyRoutines.js"],"names":["React","useEffect","useState","fetchUsername","getCurrentToken","fetchUserRoutines","MyRoutine","Button","RoutineForm","makeStyles","MyRoutines","myRoutines","setMyRoutines","creator","setCreator","currentUser","setCurrentUser","open","setIsOpen","then","data","console","log","showForm","useStyles","theme","container","display","flexWrap","position","margin","formControl","spacing","minWidth","textFields","width","classes","map","routine","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,iBAAzC,QAAkE,QAAlE;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACe,IAAD,EAAOC,SAAP,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC,CALqB,CAOrB;AACA;AACA;AACA;AACA;AACA;;AAEAG,EAAAA,iBAAiB,CAACU,WAAD,CAAjB,CACGI,IADH,CACSC,IAAD,IAAUR,aAAa,CAACQ,IAAD,CAD/B;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;;AAGA,QAAMY,QAAQ,GAAG,MAAM;AACnB,QAAIN,IAAI,KAAK,KAAb,EAAmB;AACdC,MAAAA,SAAS,CAAC,IAAD,CAAT;AAAgB,KADrB,MAEK;AACDA,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH;AACJ,GAND;;AAQA,QAAMM,SAAS,GAAGf,UAAU,CAAEgB,KAAD,KAAY;AACvCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,MADA;AAETC,MAAAA,QAAQ,EAAE,MAFD;AAGTC,MAAAA,QAAQ,EAAE,UAHD;AAITC,MAAAA,MAAM,EAAE;AAJC,KAD4B;AAOvCC,IAAAA,WAAW,EAAE;AACXD,MAAAA,MAAM,EAAEL,KAAK,CAACO,OAAN,CAAc,CAAd,CADG;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAP0B;AAWvCC,IAAAA,UAAU,EAAE;AACRC,MAAAA,KAAK,EAAE,OADC;AAERL,MAAAA,MAAM,EAAEL,KAAK,CAACO,OAAN,CAAc,CAAd;AAFA;AAX2B,GAAZ,CAAD,CAA5B;AAiBA,QAAMI,OAAO,GAAGZ,SAAS,EAAzB;;AAGF,MAAGpB,eAAe,EAAlB,EAAsB;AACpB,wBACA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEO,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAEgC,OAAO,CAACV,SAA3B;AACG,QAAA,KAAK,EAAC,WADT;AAEG,QAAA,OAAO,EAAC,WAFX;AAGG,QAAA,IAAI,EAAC,QAHR;AAIG,QAAA,OAAO,EAAEH,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFP,eAOY,QAAC,WAAD;AAAa,QAAA,UAAU,EAAEZ,UAAzB;AAAqC,QAAA,IAAI,EAAEM;AAA3C;AAAA;AAAA;AAAA;AAAA,cAPZ,EAQSN,UAAU,GAAGA,UAAU,CAAC0B,GAAX,CAAe,CAACC,OAAD,EAAUC,KAAV,kBAC7B,QAAC,SAAD;AACE,QAAA,OAAO,EAAE1B,OADX;AAEE,QAAA,UAAU,EAAEC,UAFd;AAGc,QAAA,OAAO,EAAEwB;AAHvB,SAGOC,KAHP;AAAA;AAAA;AAAA;AAAA,cADc,CAAH,gBAKP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAgBE,GAjBJ,MAiBU,oBACF;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADE;AAKT,CAxEH;;GAAM7B,U;;KAAAA,U;AA2EN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { fetchUsername, getCurrentToken, fetchUserRoutines } from '../api';\nimport MyRoutine from './MyRoutine';\nimport Button from '@material-ui/core/Button';\nimport RoutineForm from './RoutineForm';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst MyRoutines = () => {\n  \n    const [myRoutines, setMyRoutines] = useState([]);\n    const [creator, setCreator] = useState('');\n    const [currentUser, setCurrentUser] = useState('');\n    const [open, setIsOpen] = useState(false);\n\n    // useEffect(() => {\n    //   fetchUsername()\n    //   .then((data) => setCurrentUser(data.username))\n    //   fetchUserRoutines(currentUser)\n    //   .then((data) => setMyRoutines(data))\n    // })\n\n    fetchUserRoutines(currentUser)\n      .then((data) => setMyRoutines(data))\n\n    console.log(currentUser)      \n     \n    console.log(myRoutines)\n\n   \n    const showForm = () => {\n        if (open === false){\n             setIsOpen(true)}\n        else {\n            setIsOpen(false)\n        }\n    }\n\n    const useStyles = makeStyles((theme) => ({\n      container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        position: 'relative',\n        margin: '10px',\n      },\n      formControl: {\n        margin: theme.spacing(2),\n        minWidth: 120,\n      },\n      textFields: {\n          width: '350px',\n          margin: theme.spacing(2)\n        },\n    }));\n\n    const classes = useStyles();\n\n\n  if(getCurrentToken()) {\n    return (\n    <div>\n      <h1>My Routines</h1>\n           <Button className={classes.container}\n              color=\"secondary\"\n              variant=\"contained\"\n              type=\"submit\"\n              onClick={showForm}>Create A New Routine</Button>\n                <RoutineForm myRoutines={myRoutines} open={open}/>\n            {myRoutines ? myRoutines.map((routine, index) => \n            <MyRoutine \n              creator={creator} \n              setCreator={setCreator} \n              key={index} routine={routine} />) \n              : <h1>Use the form above to start creating routines.</h1>}\n         </div>\n    )} else return (\n          <div className='myRoutines'>\n          <h1>Please register or sign in to see your routines.</h1>\n      </div>\n    )\n  }\n\n\nexport default MyRoutines;"]},"metadata":{},"sourceType":"module"}